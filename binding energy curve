import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation

# SEMF constants
a_v, a_s, a_c, a_a = 15.8, 18.3, 0.714, 23.2

def pairing_term(A, Z):
    if A % 2 != 0:
        return 0
    elif Z % 2 == 0:
        return 12 / np.sqrt(A)  # even-even
    else:
        return -12 / np.sqrt(A)  # odd-odd

def semf_binding_energy(A, Z):
    return (a_v * A - a_s * A**(2/3) - a_c * Z**2 / A**(1/3) -
            a_a * (A - 2*Z)**2 / A + pairing_term(A, Z))

A_vals = np.arange(2, 250)
Z_vals = np.round(0.5 * A_vals).astype(int)  # Approx. stable nuclei

binding_energies = [semf_binding_energy(A, Z) for A, Z in zip(A_vals, Z_vals)]
binding_per_nucleon = np.array(binding_energies) / A_vals

# === 2D Animation ===
fig2d, ax2d = plt.subplots()
line, = ax2d.plot([], [], 'r-', lw=2)
ax2d.set_xlim(0, 250)
ax2d.set_ylim(0, 10)
ax2d.set_xlabel("Mass Number A")
ax2d.set_ylabel("Binding Energy per Nucleon (MeV)")
ax2d.set_title("2D Binding Energy Curve (SEMF)")

def update_2d(frame):
    line.set_data(A_vals[:frame], binding_per_nucleon[:frame])
    return line,

ani2d = FuncAnimation(fig2d, update_2d, frames=len(A_vals), blit=True, interval=30)

# === 3D Animation ===
fig3d = plt.figure()
ax3d = fig3d.add_subplot(111, projection='3d')
ax3d.set_xlabel("Mass Number A")
ax3d.set_ylabel("Atomic Number Z")
ax3d.set_zlabel("Binding Energy per Nucleon (MeV)")
ax3d.set_title("3D Binding Energy Surface")

def update_3d(frame):
    ax3d.clear()
    ax3d.set_xlim(0, 250)
    ax3d.set_ylim(0, 125)
    ax3d.set_zlim(0, 10)
    ax3d.set_xlabel("Mass Number A")
    ax3d.set_ylabel("Atomic Number Z")
    ax3d.set_zlabel("Binding Energy per Nucleon (MeV)")
    ax3d.plot3D(A_vals[:frame], Z_vals[:frame], binding_per_nucleon[:frame], 'b')
    return []

ani3d = FuncAnimation(fig3d, update_3d, frames=len(A_vals), interval=30)

plt.show()
